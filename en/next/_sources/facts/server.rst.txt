Server Facts
------------

.. _facts:server.Arch:

:code:`server.Arch`
~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Arch, )

rns the system architecture according to ``uname``.


.. _facts:server.Command:

:code:`server.Command`
~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Command, command)

rns the raw output lines of a given command.


.. _facts:server.Date:

:code:`server.Date`
~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Date, )

rns the current datetime on the server.


.. _facts:server.Groups:

:code:`server.Groups`
~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Groups, )

rns a list of groups on the system.


.. _facts:server.HasGui:

:code:`server.HasGui`
~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(HasGui)

rns a boolean indicating the remote side has GUI capabilities. Linux only.


.. _facts:server.Home:

:code:`server.Home`
~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Home, user='')

rns the home directory of the given user, or the current user if no user is given.


.. _facts:server.Hostname:

:code:`server.Hostname`
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Hostname, )

rns the current hostname of the server.


.. _facts:server.Kernel:

:code:`server.Kernel`
~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Kernel, )

rns the kernel name according to ``uname``.


.. _facts:server.KernelModules:

:code:`server.KernelModules`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(KernelModules, )

rns a dictionary of kernel module name -> info.

ode:: python

{
    "module_name": {
        "size": 0,
        "instances": 0,
        "state": "Live",
    },
}


.. _facts:server.KernelVersion:

:code:`server.KernelVersion`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(KernelVersion, )

rns the kernel version according to ``uname``.


.. _facts:server.LinuxDistribution:

:code:`server.LinuxDistribution`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(LinuxDistribution, )

rns a dict of the Linux distribution version. Ubuntu, Debian, CentOS,
ra & Gentoo currently. Also contains any key/value items located in
ase files.

ode:: python

{
    "name": "Ubuntu",
    "major": 20,
    "minor": 04,
    "release_meta": {
        "CODENAME": "focal",
        "ID_LIKE": "debian",
        ...
    }
}


.. _facts:server.LinuxGui:

:code:`server.LinuxGui`
~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(LinuxGui, )

rns a list of available Linux GUIs.


.. _facts:server.LinuxName:

:code:`server.LinuxName`
~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(LinuxName)

rns the name of the Linux distribution. Shortcut for
st.get_fact(LinuxDistribution)['name']``.


.. _facts:server.Locales:

:code:`server.Locales`
~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Locales, )

rns installed locales on the target host.

ode:: python

["C.UTF-8", "en_US.UTF-8"]


.. _facts:server.LsbRelease:

:code:`server.LsbRelease`
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(LsbRelease, )

rns a dictionary of release information using ``lsb_release``.

ode:: python

{
    "id": "Ubuntu",
    "description": "Ubuntu 18.04.2 LTS",
    "release": "18.04",
    "codename": "bionic",
    ...
}


.. _facts:server.MacosVersion:

:code:`server.MacosVersion`
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(MacosVersion, )

rns the installed MacOS version.


.. _facts:server.Mounts:

:code:`server.Mounts`
~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Mounts, )

rns a dictionary of mounted filesystems and information.

ode:: python

{
    "/": {
        "device": "/dev/mv2",
        "type": "ext4",
        "options": [
            "rw",
            "relatime"
        ]
    },
}


.. _facts:server.Os:

:code:`server.Os`
~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Os, )

rns the OS name according to ``uname``.

arning::
This fact is deprecated/renamed, please use the ``server.Kernel`` fact.


.. _facts:server.OsRelease:

:code:`server.OsRelease`
~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(OsRelease, )

rns a dictionary of release information stored in ``/etc/os-release``.

ode:: python

{
  "name": "EndeavourOS",
  "pretty_name": "EndeavourOS",
  "id": "endeavouros",
  "id_like": "arch",
  "build_id": "2024.06.25",
  ...
}


.. _facts:server.OsVersion:

:code:`server.OsVersion`
~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(OsVersion, )

rns the OS version according to ``uname``.

arning::
This fact is deprecated/renamed, please use the ``server.KernelVersion`` fact.


.. _facts:server.Path:

:code:`server.Path`
~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Path, )

rns the path environment variable of the current user.


.. _facts:server.Port:

:code:`server.Port`
~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Port, port)

rns the process occuping a port and its PID


.. _facts:server.RebootRequired:

:code:`server.RebootRequired`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(RebootRequired, )

rns a boolean indicating whether the system requires a reboot.

inux systems:
ecks /var/run/reboot-required and /var/run/reboot-required.pkgs
 Alpine Linux, compares installed kernel with running kernel

reeBSD systems:
mpares running kernel version with installed kernel version


.. _facts:server.SecurityLimits:

:code:`server.SecurityLimits`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(SecurityLimits, )

rns a list of security limits on the target host.

ode:: python

[
    {
        "domain": "*",
        "limit_type": "soft",
        "item": "nofile",
        "value": "1048576"
    },
    {
        "domain": "*",
        "limit_type": "hard",
        "item": "nofile",
        "value": "1048576"
    },
    {
        "domain": "root",
        "limit_type": "soft",
        "item": "nofile",
        "value": "1048576"
    },
    {
        "domain": "root",
        "limit_type": "hard",
        "item": "nofile",
        "value": "1048576"
    },
    {
        "domain": "*",
        "limit_type": "soft",
        "item": "memlock",
        "value": "unlimited"
    },
    {
        "domain": "*",
        "limit_type": "hard",
        "item": "memlock",
        "value": "unlimited"
    },
    {
        "domain": "root",
        "limit_type": "soft",
        "item": "memlock",
        "value": "unlimited"
    },
    {
        "domain": "root",
        "limit_type": "hard",
        "item": "memlock",
        "value": "unlimited"
    }
]


.. _facts:server.Selinux:

:code:`server.Selinux`
~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Selinux, )

overs the SELinux related facts on the target host.

ode:: python

{
    "mode": "enabled",
}


.. _facts:server.Sysctl:

:code:`server.Sysctl`
~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Sysctl, keys=None)

rns a dictionary of sysctl settings and values.

ode:: python

{
    "fs.inotify.max_queued_events": 16384,
    "fs.inode-state": [
        44565,
        360,
    ],
}


.. _facts:server.TmpDir:

:code:`server.TmpDir`
~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(TmpDir, )

rns the temporary directory of the current server, if configured.


.. _facts:server.User:

:code:`server.User`
~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(User, )

rns the name of the current user.


.. _facts:server.Users:

:code:`server.Users`
~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Users, )

rns a dictionary of users -> details.

ode:: python

{
    "user_name": {
        "comment": "Full Name",
        "home": "/home/user_name",
        "shell": "/bin/bash,
        "group": "main_user_group",
        "groups": [
            "other",
            "groups"
        ],
        "uid": user_id,
        "gid": main_user_group_id,
        "lastlog": last_login_time,
        "password": encrypted_password,
    },
}


.. _facts:server.Which:

:code:`server.Which`
~~~~~~~~~~~~~~~~~~~~

.. code:: python

    host.get_fact(Which, command)

rns the path of a given command according to `command -v`, if available.

